" vim:fdm=marker
" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
if has('vim_starting')
    set nocompatible

    set runtimepath +=~/.vim/bundle/neobundle.vim/
endif

" Switch syntax highlighting on, when the terminal has colors
if &t_Co > 2 || has("gui_running")
  syntax on
  syntax enable
endif

" Enable file type detection.
filetype plugin indent on

" Highlight trailing white spaces
match ErrorMsg '\s\+$'

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
      \ | wincmd p | diffthis
endif

" let hostname = substitute(system('hostname'), '\n', '', '')
" let current_dir = getcwd()

" Set colorscheme (the first one that exists will be used)
if has#colorscheme('lucius')
    set background=dark
    colo lucius
elseif has#colorscheme('gruvbox')
    colo gruvbox
else
    colo ron
endif
" Split up config settings into multiple files (modularization ftw!)
runtime! config/*.vim

" if &term =~ 'xterm-256color'
    " Disable Background Color Erase (BCE) so that color schemes
    " work properly when Vim is used inside tmux and GNU screen.
    " See also http://snk.tuxfamily.org/log/vim-256color-bce.html
    " set t_ut=
" endif
set t_ut=

" Use git protocol
let g:neobundle#types#git#default_protocol = 'git'

" Start NeoBundle
call neobundle#begin(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

let overridden = [
            \ 'tpope/vim-fugitive.git',
            \ 'shougo/vimproc.vim'
            \ ]

NeoBundle 'tpope/vim-fugitive.git', { 'augroup' : 'fugitive' }
NeoBundle 'Shougo/vimproc.vim', { 'build': {'unix': 'make'}}

" Load all plugins that don't require special settings
let bundle_list=expand('$HOME/.vim/bundle_list.txt')
if filereadable(bundle_list)
for bundle in readfile(bundle_list)
    if index(overridden, tolower(bundle)) == -1
        execute "NeoBundle '" . bundle . "'"
    endif
endfor
endif

call neobundle#end()

" Call on_source hook when reloading .vimrc.
if !has('vim_starting')
    call neobundle#call_hook('on_source')
endif

" Generate help pages
execute pathogen#helptags()

" If there are uninstalled bundles found on startup, this will prompt to install
NeoBundleCheck
