#!/usr/bin/python
from os import remove, readlink, symlink
from shutil import rmtree
from os.path import expandvars as expv, islink, isdir, exists
from socket import gethostname

HOSTNAME = gethostname()
if 'shutupmiles' in HOSTNAME:
    HOSTNAME = 'laptop'
DOTHOME = expv('$HOME/dotfiles')
file_links = '{}/file_links.txt'.format(DOTHOME)

def make_link(source, dest):
    """
    The part that actually links the files
    """
    source = expv(source)
    print "Linking: {} -> {}".format(source, dest)
    try:
        if isdir(dest):
            rmtree(dest)
        else:
            remove(dest)
    except OSError:
        pass
    symlink(source, dest)

def _readline(line):
    """
    Takes care of all of the readline logic
    """
    if line[0] == '#': # Because `#' is a comment in file_links.txt
        return None
    line = line.split(',')
    source, dest = line[:2]
    source = '{}/{}'.format(DOTHOME, source)
    dest = expv(dest)
    args = line[2:]
    return source, dest, args

def check_exists(source, dest):
    """
    Checks to see if a link or file already exists in the location we're trying
    to use
    """
    fname = lambda x: x.split('/')[-1]

    if islink(dest):
        if readlink(dest) != source and fname(readlink(dest)) != '.' + fname(source):
            print ("{} is already linked to {}\n"
                   "Would you like to overwrite it? [yn]").format(
                        dest, readlink(dest))
            return yn_prompt()
    else:
        print "{} already exists, would you like to overwrite it? [yn]".format(
            dest)
        return yn_prompt()

def yn_prompt():
    """
    Generates a 'yes' or 'no' prompe
    """
    response = ''
    responses = ['y', 'yes', 'n', 'no']

    while response not in responses:
        response = raw_input('>').lower()
    if response == 'y' or 'yes':
        return True
    else:
        return False

def main():
    if not exists(file_links):
        return
    with open(expv(file_links), 'r') as f:
        # Filter out blank lines
        for line in filter(None, (line.rstrip() for line in f)):
            try:
                source, dest, args = _readline(line)
            except TypeError:
                continue

            # Check that the file your trying to link actually exists
            if not exists(source):
                print ("{} does not exist\n"
                       "You need to update file_links.txt with its current"
                       "location.").format(source)
                continue

            if args:
                # First argument is hostname
                # Only make links if on correct host
                if args[0].lower() != HOSTNAME.lower():
                    continue

            if not exists(dest):
                make_link(source, dest)
            else:
                if check_exists(source, dest) == True:
                    make_link(source, dest)

if __name__ == '__main__':
    main()
